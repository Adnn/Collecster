# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-08-05 13:40
from __future__ import unicode_literals

import advideogame.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('supervisor', '0002_initial_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('description', models.CharField(blank=True, max_length=180)),
                ('value_type', models.CharField(choices=[('RTN', 'Rating'), ('PRS', 'Presence')], max_length=3)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Attribute categories',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BackupMemory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="eg. 'Mega Drive', 'NES', ...", max_length=30, unique=True)),
                ('generation', models.DecimalField(decimal_places=0, max_digits=2)),
                ('destination', models.CharField(choices=[('A', 'Arcade'), ('H', 'Home entertainment')], max_length=1)),
                ('abbreviated_name', models.CharField(help_text='Abbreviated name for the system, independently of any interface.', max_length=8, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatteryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=32, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bundle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrival_date', models.DateField()),
                ('note', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BundleComposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_new', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='BundlePicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_file', models.ImageField(upload_to=advideogame.models.name_bundle_picture)),
            ],
        ),
        migrations.CreateModel(
            name='CollectionLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Combo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
                ('is_individual', models.BooleanField(default=False, verbose_name='Is it a single person name ?')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='CompanyService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distinctive_name', models.CharField(max_length=180)),
                ('common_name', models.CharField(blank=True, max_length=60)),
                ('primary_nature', models.CharField(choices=[('CONSOLE', 'Console'), ('CONSOLE_CHIP', 'Console-on-chip'), ('HANDHELD_CONSOLE', 'Handheld Console'), ('Software', (('GAME', 'Game'), ('ADD_ON', 'AddOn'), ('MOD', 'Mod'), ('DEMO', 'Demo'), ('OS', 'Os'), ('WEB_BROWSER', 'Web browser'), ('APPLICATION', 'Application'), ('MEDIA', 'Media'))), ('Accessory', (('PAD', 'Pad'), ('ARCADE_STICK', 'Arcade stick'), ('JOYSTICK', 'Joystick'), ('GUN', 'Gun'), ('STEERINGWHEEL', 'Steeringwheel'), ('DRUM', 'Drum'), ('GUITAR', 'Guitar'), ('TURNTABLE', 'Turntable'), ('BATTERY_CHARGER', 'Battery charger'), ('BATTERY_ELEC', 'Electric battery'), ('BUZZER', 'Buzzer'), ('CAMERA', 'Camera'), ('CHEAT_DEV', 'Cheat device'), ('DANCEMAT', 'Dancemat'), ('FISHING_ROD', 'Fishing rod'), ('HEADPHONES', 'Headphones'), ('KEYBOARD', 'Keyboard'), ('LINK_CABLE', 'Link cable'), ('MAGNIFIER', 'Magnifier'), ('MEMORYCARD', 'Memorycard'), ('MICROPHONE', 'Microphone'), ('MODEM', 'Modem'), ('MOTION_SENSING', 'Motion sensing'), ('MOUSE', 'Mouse'), ('MULTITAP', 'Multitap'), ('PRINTER', 'Printer'), ('PROTECTIVE_CASE', 'Protective case'), ('RAM_PACK', 'Ram pack'), ('REGION_UNLOCK', 'Region unlock'), ('RUMBLE_PACK', 'Rumble pack'), ('SCANNER', 'Scanner'), ('SCREEN_MAIN', 'Screen main'), ('SCREEN_INDIV', 'Screen individual'), ('SPEAKERS', 'Speakers'), ('STEREOGLASSES', 'Stereo glasses'), ('TRANSIT_CONTAINER', 'Transit container')))], max_length=17)),
                ('year', models.DecimalField(blank=True, decimal_places=0, help_text='Can help disambiguate names, in particular in the case of franchise reboots', max_digits=4, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advideogame_concept_created_set', to='supervisor.UserExtension')),
                ('developer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConceptNature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nature', models.CharField(choices=[('CONSOLE', 'Console'), ('CONSOLE_CHIP', 'Console-on-chip'), ('HANDHELD_CONSOLE', 'Handheld Console'), ('Software', (('GAME', 'Game'), ('ADD_ON', 'AddOn'), ('MOD', 'Mod'), ('DEMO', 'Demo'), ('OS', 'Os'), ('WEB_BROWSER', 'Web browser'), ('APPLICATION', 'Application'), ('MEDIA', 'Media'))), ('Accessory', (('PAD', 'Pad'), ('ARCADE_STICK', 'Arcade stick'), ('JOYSTICK', 'Joystick'), ('GUN', 'Gun'), ('STEERINGWHEEL', 'Steeringwheel'), ('DRUM', 'Drum'), ('GUITAR', 'Guitar'), ('TURNTABLE', 'Turntable'), ('BATTERY_CHARGER', 'Battery charger'), ('BATTERY_ELEC', 'Electric battery'), ('BUZZER', 'Buzzer'), ('CAMERA', 'Camera'), ('CHEAT_DEV', 'Cheat device'), ('DANCEMAT', 'Dancemat'), ('FISHING_ROD', 'Fishing rod'), ('HEADPHONES', 'Headphones'), ('KEYBOARD', 'Keyboard'), ('LINK_CABLE', 'Link cable'), ('MAGNIFIER', 'Magnifier'), ('MEMORYCARD', 'Memorycard'), ('MICROPHONE', 'Microphone'), ('MODEM', 'Modem'), ('MOTION_SENSING', 'Motion sensing'), ('MOUSE', 'Mouse'), ('MULTITAP', 'Multitap'), ('PRINTER', 'Printer'), ('PROTECTIVE_CASE', 'Protective case'), ('RAM_PACK', 'Ram pack'), ('REGION_UNLOCK', 'Region unlock'), ('RUMBLE_PACK', 'Rumble pack'), ('SCANNER', 'Scanner'), ('SCREEN_MAIN', 'Screen main'), ('SCREEN_INDIV', 'Screen individual'), ('SPEAKERS', 'Speakers'), ('STEREOGLASSES', 'Stereo glasses'), ('TRANSIT_CONTAINER', 'Transit container')))], max_length=17)),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_nature_set', to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConceptRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation', models.CharField(choices=[('DRV', 'derives from'), ('MAO', 'mod/add-on for'), ('REQ', 'requires')], max_length=3)),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relates_to_set', to='advideogame.Concept')),
                ('related_concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_by_set', to='advideogame.Concept')),
            ],
        ),
        migrations.CreateModel(
            name='ConceptUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(unique=True)),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
        ),
        migrations.CreateModel(
            name='ConsoleOcc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_modded', models.BooleanField()),
                ('copy_modded', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('force_feedback', models.BooleanField()),
                ('rumble_feedback', models.BooleanField()),
                ('autofire', models.BooleanField()),
                ('slow', models.BooleanField()),
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=64)),
                ('code', models.CharField(help_text='ISO 4217', max_length=4)),
                ('symbol', models.CharField(max_length=4)),
            ],
            options={
                'verbose_name_plural': 'currencies',
            },
        ),
        migrations.CreateModel(
            name='Demo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_number', models.PositiveIntegerField(blank=True, null=True)),
                ('games_playable', models.ManyToManyField(blank=True, related_name='playable_demo_set', to='advideogame.Concept')),
                ('games_video', models.ManyToManyField(blank=True, related_name='video_demo_set', to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DirectionalController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Distinction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('note', models.CharField(blank=True, help_text='Optional details about the meaning of this distinction.', max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hardware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colors', models.ManyToManyField(help_text='Principal color(s).', to='advideogame.Color')),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InputType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='InterfaceDetailBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='InterfacesSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_name', models.CharField(max_length=60, unique=True)),
                ('implicit_system', models.BooleanField(default=False, help_text='Indicate that this interface specification was not released as a separate system, but implicitly exists as soon as all required interfaces are united (eg. Sega Mega-CD 32X).')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(choices=[('CH', 'Switzerland'), ('UK', 'UK'), ('IE', 'Ireland'), ('Asia', (('CN', 'China'), ('KR', 'Korea'), ('JP', 'Japan'))), ('Europe', (('LT', 'Lithuania'), ('BE', 'Belgium'), ('FR', 'France'), ('DE', 'Germany'), ('IT', 'Italy'), ('NL', 'Netherlands'), ('PT', 'Portugal'), ('ES', 'Spain'))), ('America', (('US', 'USA'), ('CA', 'Canada'), ('BR', 'Brazil'))), ('Maghreb', (('DZ', 'Algeria'), ('MA', 'Morocco'), ('TN', 'Tunisia')))], max_length=2)),
                ('city', models.CharField(blank=True, max_length=60)),
                ('post_code', models.CharField(blank=True, max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='LockoutRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.CharField(max_length=10)),
                ('note', models.CharField(max_length=60)),
                ('limit_scope', models.ManyToManyField(blank=True, help_text='When specified, this lockout will be limited to the selected systems.', to='advideogame.BaseSystem')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('lastmodif_date', models.DateTimeField(auto_now=True)),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('origin', models.CharField(blank=True, choices=[('OR', 'Original'), ('BU', 'Buy usage'), ('BC', 'Buy collection'), ('BA', 'Buy back'), ('GF', 'Gift')], max_length=2)),
                ('blister', models.BooleanField(help_text='Indicates whether a blister is still present.')),
                ('note', models.CharField(blank=True, max_length=256)),
                ('unique_number', models.CharField(blank=True, help_text='An identifier uniquely attached to this occurrence (eg. collector numbered edition).', max_length=32)),
                ('tag_file', models.FileField(blank=True, null=True, upload_to=advideogame.models.Occurrence.never_user_upload)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advideogame_occurrence_created_set', to='supervisor.UserExtension')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Currency')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OccurrenceAnyAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_id', models.PositiveIntegerField()),
                ('value', models.CharField(max_length=1)),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.ContentType')),
                ('occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='advideogame.Occurrence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OccurrenceAnyAttributeDefect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defect_description', models.CharField(max_length=256)),
                ('occurrence_any_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.OccurrenceAnyAttribute')),
            ],
        ),
        migrations.CreateModel(
            name='OccurrenceComposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='advideogame.Occurrence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OccurrencePicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_id', models.PositiveIntegerField(null=True)),
                ('detail', models.CharField(choices=[('GRP', 'Group'), ('FRT', 'Front'), ('BCK', 'Back'), ('SID', 'Side'), ('SLB', 'Side label'), ('INS', 'Inside'), ('DEF', 'Defect')], default='GRP', max_length=3)),
                ('image_file', models.ImageField(upload_to=advideogame.models.name_occurrence_picture)),
                ('attribute_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pictures', to='advideogame.Occurrence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OperationalOcc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('working_condition', models.CharField(choices=[('?', 'N/A'), ('Y', 'Yes'), ('N', 'No')], default='?', max_length=1)),
                ('occurrence', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Occurrence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProvidedInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cardinality', models.PositiveSmallIntegerField(default=1)),
                ('on_tag', models.BooleanField(default=False, help_text='Display this interface on the tag, in place of the corresponding advertised system.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurchaseContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Online', (('NET', 'e-shop'), ('ADS', 'Advertisements'))), ('SHP', 'Shop'), ('SEC', 'Secondhand sale'), ('WOM', 'Word of mouth')], max_length=3)),
                ('name', models.CharField(max_length=60)),
                ('address_complement', models.CharField(blank=True, max_length=60)),
                ('url', models.URLField(blank=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Location')),
            ],
        ),
        migrations.CreateModel(
            name='RamMemory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=180, verbose_name="Release's name")),
                ('partial_date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('partial_date_precision', models.CharField(blank=True, choices=[('DD', 'Day'), ('MM', 'Month'), ('YYYY', 'Year')], default='DD', max_length=4, verbose_name='Date precision')),
                ('immaterial', models.BooleanField(default=False)),
                ('digitally_distributed', models.BooleanField(default=False, help_text='a-la Steam')),
                ('alternative_distribution', models.BooleanField(default=False, help_text='If the release was not officially sold in shops, but distributed otherwise (eg. Internet)')),
                ('special_case_release', models.CharField(blank=True, choices=[('L', 'loose'), ('C', 'nested without discrete box')], help_text="'loose' if the absence of the object's packaging makes it impossible to indentify the exact release.<br/>'nested without discrete box' for releases that are exclusively used for composing others, without a discrete packaging. (eg. Controller within a console.)", max_length=1)),
                ('barcode', models.CharField(blank=True, max_length=20)),
                ('version', models.CharField(blank=True, help_text='Version or model.', max_length=20)),
                ('unsure_region', models.BooleanField(default=False, help_text='Check if the release region is uncertain.')),
                ('unsure_content', models.BooleanField(default=False, help_text='Check if the release exact attributes and composition is not known.')),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advideogame_release_created_set', to='supervisor.UserExtension')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReleaseAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.CharField(blank=True, help_text='Distinctive remark if the attribute is repeated.', max_length=60)),
                ('code', models.CharField(blank=True, max_length=64)),
                ('code_type', models.CharField(blank=True, choices=[('S', 'Serial number'), ('C', 'Catalog / Internal')], max_length=1)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Attribute')),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='advideogame.Release')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReleaseComposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='advideogame.Release')),
                ('to_release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReleaseCustomAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('description', models.CharField(blank=True, max_length=180)),
                ('value_type', models.CharField(choices=[('RTN', 'Rating'), ('PRS', 'Presence')], max_length=3)),
                ('note', models.CharField(blank=True, help_text='Distinctive remark if the attribute is repeated.', max_length=60, null=True)),
                ('code', models.CharField(blank=True, max_length=64)),
                ('code_type', models.CharField(blank=True, choices=[('S', 'Serial number'), ('C', 'Catalog / Internal')], max_length=1)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.AttributeCategory')),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_attributes', to='advideogame.Release')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReleaseDistinction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=30)),
                ('distinction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Distinction')),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReleasePicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_file', models.ImageField(upload_to=advideogame.models.name_release_picture)),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release')),
            ],
        ),
        migrations.CreateModel(
            name='ReleaseRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
                ('detail', models.CharField(blank=True, max_length=20)),
                ('parent_region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.ReleaseRegion')),
            ],
        ),
        migrations.CreateModel(
            name='ReleaseUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(unique=True)),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release')),
            ],
        ),
        migrations.CreateModel(
            name='Remote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battery_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.BatteryType')),
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RemoteAccessory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wireless', models.BooleanField()),
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RequiredInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cardinality', models.PositiveSmallIntegerField(default=1)),
                ('on_tag', models.BooleanField(default=False, help_text='Display this interface on the tag, in place of the corresponding advertised system.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Shell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_shell', models.BooleanField(help_text='If this concept is simply a plastic shell.')),
                ('concept', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_label', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.CollectionLabel', verbose_name='Released in collection')),
                ('porter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ported_software_set', to='advideogame.Company', verbose_name='Company realizing the port')),
                ('publisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='published_software_set', to='advideogame.Company')),
                ('release', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('symbol', models.CharField(blank=True, max_length=5)),
                ('byte_equivalence', models.PositiveIntegerField(help_text='The number of (8-bits) bytes one unit is equivalent to.', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Company')),
            ],
        ),
        migrations.CreateModel(
            name='SystemMediaPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media', models.CharField(max_length=32)),
                ('wireless', models.BooleanField(default=False)),
                ('abbreviated_name', models.CharField(max_length=12, unique=True)),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.BaseSystem')),
            ],
        ),
        migrations.CreateModel(
            name='SystemSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bios_version', models.CharField(blank=True, max_length=10)),
                ('interfaces_specification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.InterfacesSpecification')),
                ('regional_lockout', models.ManyToManyField(blank=True, to='advideogame.LockoutRegion')),
            ],
        ),
        migrations.CreateModel(
            name='SystemVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no_variant', models.BooleanField(default=False, help_text='Set to true indicated that the corresponding concept has no variants.')),
                ('variant_name', models.CharField(blank=True, max_length=32)),
                ('system_concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Concept')),
            ],
        ),
        migrations.CreateModel(
            name='TagRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The value printed on the occurrence tag.', max_length=3, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TagToOccurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_occurrence_id', models.IntegerField()),
                ('occurrence', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Occurrence')),
                ('user_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advideogame_tagtooccurrence_set', to='supervisor.UserExtension')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release')),
                ('system_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.SystemVariant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommonInterfaceDetail',
            fields=[
                ('interfacedetailbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='advideogame.InterfaceDetailBase')),
                ('interfaces_specification', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.InterfacesSpecification')),
            ],
            bases=('advideogame.interfacedetailbase',),
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('bundle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='advideogame.Bundle')),
                ('donator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='supervisor.Person')),
            ],
            options={
                'abstract': False,
            },
            bases=('advideogame.bundle',),
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('bundle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='advideogame.Bundle')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Including shipping costs.', max_digits=10, null=True)),
                ('shipping_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('retrieval', models.CharField(choices=[('P', 'Local pickup'), ('F', 'Friend pickup'), ('S', 'Shipped')], max_length=1)),
                ('address_complement', models.CharField(blank=True, max_length=60)),
            ],
            options={
                'abstract': False,
            },
            bases=('advideogame.bundle',),
        ),
        migrations.CreateModel(
            name='SystemInterfaceDetail',
            fields=[
                ('interfacedetailbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='advideogame.InterfaceDetailBase')),
            ],
            bases=('advideogame.interfacedetailbase',),
        ),
        migrations.AddField(
            model_name='requiredinterface',
            name='interface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.SystemMediaPair'),
        ),
        migrations.AddField(
            model_name='requiredinterface',
            name='interface_detail_base',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.InterfaceDetailBase'),
        ),
        migrations.AddField(
            model_name='requiredinterface',
            name='regional_lockout_override',
            field=models.ManyToManyField(blank=True, to='advideogame.LockoutRegion'),
        ),
        migrations.AddField(
            model_name='requiredinterface',
            name='reused_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='advideogame.SystemMediaPair'),
        ),
        migrations.AddField(
            model_name='releaseregion',
            name='tag_region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.TagRegion'),
        ),
        migrations.AddField(
            model_name='release',
            name='distinctions',
            field=models.ManyToManyField(through='advideogame.ReleaseDistinction', to='advideogame.Distinction'),
        ),
        migrations.AddField(
            model_name='release',
            name='nested_releases',
            field=models.ManyToManyField(through='advideogame.ReleaseComposition', to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='release',
            name='release_regions',
            field=models.ManyToManyField(blank=True, to='advideogame.ReleaseRegion'),
        ),
        migrations.AddField(
            model_name='release',
            name='system_specification',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.SystemSpecification'),
        ),
        migrations.AddField(
            model_name='rammemory',
            name='release',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='rammemory',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.StorageUnit'),
        ),
        migrations.AddField(
            model_name='providedinterface',
            name='interface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.SystemMediaPair'),
        ),
        migrations.AddField(
            model_name='providedinterface',
            name='interface_detail_base',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.InterfaceDetailBase'),
        ),
        migrations.AddField(
            model_name='providedinterface',
            name='regional_lockout_override',
            field=models.ManyToManyField(blank=True, to='advideogame.LockoutRegion'),
        ),
        migrations.AddField(
            model_name='providedinterface',
            name='reused_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='advideogame.SystemMediaPair'),
        ),
        migrations.AddField(
            model_name='occurrencecomposition',
            name='release_composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.ReleaseComposition'),
        ),
        migrations.AddField(
            model_name='occurrencecomposition',
            name='to_occurrence',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='occurrence_composition', to='advideogame.Occurrence'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='nested_occurrences',
            field=models.ManyToManyField(through='advideogame.OccurrenceComposition', to='advideogame.Occurrence'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advideogame_occurrence_owned_set', to='supervisor.Person'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='media',
            name='media_types',
            field=models.ManyToManyField(to='advideogame.MediaType'),
        ),
        migrations.AddField(
            model_name='media',
            name='release',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together=set([('country', 'city', 'post_code')]),
        ),
        migrations.AddField(
            model_name='interfacedetailbase',
            name='provides',
            field=models.ManyToManyField(related_name='provided_to_set', through='advideogame.ProvidedInterface', to='advideogame.SystemMediaPair'),
        ),
        migrations.AddField(
            model_name='interfacedetailbase',
            name='requires',
            field=models.ManyToManyField(related_name='required_by_set', through='advideogame.RequiredInterface', to='advideogame.SystemMediaPair'),
        ),
        migrations.AddField(
            model_name='hardware',
            name='release',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='directionalcontroller',
            name='direction_input_type',
            field=models.ManyToManyField(to='advideogame.InputType'),
        ),
        migrations.AddField(
            model_name='demo',
            name='release',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='consoleocc',
            name='occurrence',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Occurrence'),
        ),
        migrations.AddField(
            model_name='concept',
            name='name_scope_restriction',
            field=models.ManyToManyField(blank=True, help_text="Allows disambiguation when the same name does not referer to the same concept depending on the region.(eg. 'Super Mario Bros. 2' is not the same game in Japan and EU/US.)", to='advideogame.ReleaseRegion'),
        ),
        migrations.AddField(
            model_name='company',
            name='services',
            field=models.ManyToManyField(to='advideogame.CompanyService'),
        ),
        migrations.AddField(
            model_name='combo',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Company'),
        ),
        migrations.AddField(
            model_name='combo',
            name='release',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='collectionlabel',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Company'),
        ),
        migrations.AddField(
            model_name='bundlepicture',
            name='bundle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Bundle'),
        ),
        migrations.AddField(
            model_name='bundlecomposition',
            name='bundle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Bundle'),
        ),
        migrations.AddField(
            model_name='bundlecomposition',
            name='occurrence',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Occurrence'),
        ),
        migrations.AddField(
            model_name='bundle',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advideogame_bundle_created_set', to='supervisor.UserExtension'),
        ),
        migrations.AddField(
            model_name='basesystem',
            name='brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Company'),
        ),
        migrations.AddField(
            model_name='basesystem',
            name='upgrade_for',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.BaseSystem'),
        ),
        migrations.AddField(
            model_name='backupmemory',
            name='release',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='advideogame.Release'),
        ),
        migrations.AddField(
            model_name='backupmemory',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.StorageUnit'),
        ),
        migrations.AddField(
            model_name='attribute',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.AttributeCategory'),
        ),
        migrations.AlterUniqueTogether(
            name='tagtooccurrence',
            unique_together=set([('user_creator', 'user_occurrence_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='systemvariant',
            unique_together=set([('system_concept', 'variant_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='systemmediapair',
            unique_together=set([('system', 'media')]),
        ),
        migrations.AddField(
            model_name='systeminterfacedetail',
            name='advertised_system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.BaseSystem'),
        ),
        migrations.AddField(
            model_name='systeminterfacedetail',
            name='interfaces_specification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.InterfacesSpecification'),
        ),
        migrations.AlterUniqueTogether(
            name='storageunit',
            unique_together=set([('name', 'brand')]),
        ),
        migrations.AlterUniqueTogether(
            name='releasecustomattribute',
            unique_together=set([('category', 'name', 'release', 'note')]),
        ),
        migrations.AlterUniqueTogether(
            name='releaseattribute',
            unique_together=set([('release', 'attribute', 'note')]),
        ),
        migrations.AlterUniqueTogether(
            name='purchasecontext',
            unique_together=set([('category', 'name', 'location')]),
        ),
        migrations.AddField(
            model_name='purchase',
            name='context',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advideogame.PurchaseContext'),
        ),
        migrations.AddField(
            model_name='purchase',
            name='currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Currency'),
        ),
        migrations.AddField(
            model_name='purchase',
            name='location',
            field=models.ForeignKey(blank=True, help_text='The location the object shipped from, or the pickup location. Not available when buying from a shop.', null=True, on_delete=django.db.models.deletion.CASCADE, to='advideogame.Location'),
        ),
        migrations.AddField(
            model_name='purchase',
            name='pickup_person',
            field=models.ForeignKey(blank=True, help_text="Only when retrieval is 'Friend pickup'.", null=True, on_delete=django.db.models.deletion.CASCADE, to='supervisor.Person'),
        ),
        migrations.AlterUniqueTogether(
            name='occurrencecomposition',
            unique_together=set([('release_composition', 'from_occurrence')]),
        ),
        migrations.AlterUniqueTogether(
            name='occurrenceanyattribute',
            unique_together=set([('occurrence', 'attribute_type', 'attribute_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='conceptnature',
            unique_together=set([('concept', 'nature')]),
        ),
        migrations.AlterUniqueTogether(
            name='collectionlabel',
            unique_together=set([('name', 'company')]),
        ),
        migrations.AlterUniqueTogether(
            name='attribute',
            unique_together=set([('category', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='systeminterfacedetail',
            unique_together=set([('interfaces_specification', 'advertised_system')]),
        ),
    ]
