This project is very dynamic in the formsets its presenting on the admin pages. This implies a need for custom validation of the constraints in order to ensure data consistency. Validation should protect against (in increasing order of interest):
* Bugs in the code (logic errors)
* Forged forms submission


= CONCEPT =
== Natures cannot be repeated on Concepts ==
1.a) A Concept cannot be assigned several times the same secondary nature.
    Model-level: unique_together on ConceptNature
1.b) Its primary nature cannot be the same as any of its secondary nature.
    Model-level: TODO Could be done in ConceptNature::clean(), but it would not work for ConceptNature inline on a Concept form.
    Offline: done

== Uniqueness ==
2.a) The "distinctive_name" and "year" pair must be unique.
2.a) VIDEOGAME: Different concept instances can have the same "distinctive_name" and the same "year" if their name have distinct "scope"
    No scope means worldwide, and is distinct from any non-empty scope, but is the same as another empty scope.
    Two non-empty scopes are distinct only if their union is empty.

= SPECIFIC =
== Enforcing Specific on Release and Occurrence ==
1.a) There must be one formset for each Specific corresponding to the nature(s) of the instance (the instance being a Release or an Occurrence).
1.b) There must be ONLY one form in each of such formset
    This is enforced by min_num = max_num = 1 and validate_min + validate_max, which are set on each Specific's formset instance.
    Model-level: this is enforced by a OneToOneField from the Specific to the corresponding instance.
1.c) There must not be any formset for a Specific that is not corresponding to the nature(s).
    This is naturally enforced by the dynamic generation of FormSet_set in the server code: this code create all the required formset, and only those formsets.
    Forged-forms: In particular for c), even if data was posted for other formsets, it would not be assigned to anything.

Data model consistency 
   TODO
 
= ATTRIBUTES =
== Constraints on Release attributes ==
1) When the same Attribute is repeated for a given Release, each must have a distinct note. (Nb: empty being distinct from any non-empty) It applies to both Attribute and CustomAttribute
    Model-level: this is enforced by a unique_together constraint. No need for offline.
    Interface-level: a ValidationError is raised.
    Other introduction path: None

== Enforcing the Attributes assigned to Occurrences==
2.a) For any Occurrence, there must be one OccurrenceAttribute instance mapping to each ReleaseAttribute of its correponding Release.
2.b) There must be ONLY one
    Model-level: this is enforced by a unique_together constraint. No need for offline
2.c) There must not be an OccurrenceAttribute without the associated ReleaseAttribute on the corresponding Release.
    Model-level: enforced in OccurrenceAnyAttributeBase::clean(), TODO there is a problem when the Occurrence is first added.
    Other introduction path: Changing the Release[Custom]Attribute associated Release
2.d) The order of the Occurrence[Custom]Attribute must match the order of their corresponding Release[Custom]Attribute.

3) The value assigned to the OccurrenceAttribute must be a value authorized by the corresponding Release[Custom]Attribute.
    Model-level: enforced in OccurrenceAnyAttributeBase::clean()
    Interface-level: the formset callback dynamically assigns the right Form Field type to the "value" inline form field, only presenting acceptable values and validating the selected one.


= COMPOSITION =
== Enforcing the Releases and Occurrences composition ==
1) Prevent circular compositions on Release (release A is composed of a release B which is composed of a release A)
    Model-level: enforced by a custom ReleaseComposition::clean() method.
    Interface: the model-level reports a clear form error.
    Other introduction path: None

2.a) For any occurrence, there must be one OccurrenceComposition instance (potentially empty) for each ReleaseComposition instance of the corresponding Release.
    Model-level: not possible ?
2.b) There must be ONLY one
    Model-level: enforced by a unique_together clause on OccurrenceComposition
    Other introduction path: None
2.c) The OccurrenceComposition container-occurrence (from_occurrence field) must be an instance of the associated ReleaseComposition container-release.
    Model-level: enforced in OccurrenceComposition::clean(), TODO there is a problem when the container-Occurrence is first added.
    Other introduction path: Changing the ReleaseComposition container-release
2.1) Ideally, enforce same relative order (pk ordering ?) between the ReleaseComposition for a Release and the OccurrenceComposition for any Occurrence of said Release.

3.a) For any OccurrenceComposition, the nested Occurrence (i.e. to_occurrence field) must be an instance of the nested Release in the corresponding ReleaseComposition.
    Model-level: enforced in OccurrenceComposition::clean()
    Interface: the queryset only keeps the occurrences instantiating the right Release
    Other introduction path: Changing the ReleaseComposition nested Release.
3.b) Any occurrence can only be nested in a single occurrence.
    Model-level: enforced by OccurrenceComposition::to_occurrence being marked unique
    Interface: the queryset only keeps the occurrences that are not already nested
    Other introduction path: None


= COLLECSTER_PROPERTIES =
1) For a Release/Occurrence instance, all the "required_on_{category}" (resp required_on_non_{category}) fields must have non-empty values if the method "is_{category}" returns True (resp. False) for said instance.
2) For a Release/Occurrence instance, all the "forbidden_on_{category}" (resp forbidden_on_non_{category}) fields must have empty values if the method "is_{category}" returns True (resp. False) for said instance.

= IMMATERIAL =
== Immaterial restrictions ==
1) Prevent an immaterial release from having nested releases.
2) An occurrence that instantiate an immaterial release must be nested under another occurrence (that cannot instantiate an immaterial Release, because of 1).
3) immaterial Releases should not have a [content]self attribute.


= PARTIAL_DATE =
1) If not date is specified, the precision should be blank.
    Model-level: the clean method set the precision value to blank in this case.
    Interface: The blank option is not proposed to the user. TODO disable the precision with JS when there is not date specified
2.a) When the date is specified, the precision is mandatory.
    Model-level: Enforced in the clean method.
    Interface: The blank option is not proposed to the user.
2.b) When a date is partial, the "unspecified" parts (i.e., the information beyond the specified precision) should be set to the lowest available value. (eg. If the precision is month, the unspecified part is the day. The lowest day value is "1".)
    Model-level: Enforced in the clean method.

= SPECIAL_CONCEPTS =
1.a) Special concepts distinctive_name are prefixed with an underscore.
1.b) only special concepts distinctive_name can start with an underscore.
2.a) The special Concepts ("combo" at the moment) are assigned a primary nature of the same name.
2.b) The special Concepts cannot have additional natures
2.c) The primary nature of the same name can only be assigned to the corresponding special concept


= USER =
1) The created_by field should not be allowed to change

= TAGTOOCCURRENCE =
1.a) There should be a TagToOccurrence instance for each Occurrence
1.b) and only one
    Model-level: naturally enforced by the occurrence OneToOneField.
2) The TAG occurrence id are unique per user.
    Model-level: unique_together on TagToOccurrence

= ADVIDEOGAME =
== OccurrencePicture==
1.a) OccurrencePicture should have a generic relation to a ReleaseAttribute or a CustomReleaseAttribute associated with the Release
of the related Occurrence.
1.b) This relation should be left blank for the GROUP detail.
1.c) This relation is mandatory for all other details.

== RELEASE_REGIONS ==
1) It is not allowed to specify at the same time a release region and any of its nested regions, as the parent regions implies all the regions it contains.


== PurchaseContext ==
1.a) Online purchase context categories require an URL
1.b) Online purchase context categories cannot have location or address complement
2) Non-online purchase context categories can have an address complement only if they have a location
3) category, name and location must be unique. If location is not specified, then category and name must be unique.
    (implying that if an instance specifies the 3, it is not possible to make another instance leaving location empty)

== Purchase ==
1) Purchase can have an address complement only if they have a location
2) The fields location and address_complement are allowed only if the PurchaseContext is internet advertisement, as 
    otherwise the location of the purchase is always the same location as the context itself.
3.a) The field pickup_person is mandatory when retrieval is friend pickup.
3.b) The field pickup_person is forbidden when retrieval is not friend pickup.
4) The field shipping_cost is forbidden when retrieval is not 'shipped'

= Tweaking the Admin interface to fit the application =

* Removing the '+' sign on formsets (allowing to add more forms)
** set the FormSet class 'max_num' attribute to the number of displayed forms.

* Removing the 'delete' checkbox on formset forms
** set the AdminInline class 'can_delete' attribute to false. 


