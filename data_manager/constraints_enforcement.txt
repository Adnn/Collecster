This project is very dynamic in the formsets its presenting on the admin pages. This implies a need for custom validation of the constraints, to protect against (in increasing order of interest):
* Bugs in the code
* Forged forms submission

= Enforcing Specific on Release and Occurence =
1.a) There must be a formset for each Specific corresponding to the nature(s) of the instance (the instance being a Release or an Occurence).
1.b) There must not be any formset for a Specific that is not corresponding to the nature(s).
This is naturally enforced by the dynamic generation of FormSet_set in the server code: this code create all the required formset, and only those formsets.
In particular for b), even if data was posted for other formsets, it would not be assigned to anything.

2) In each Specific's formset, there must be exactly ONE form
This is enforced by min_num = max_num = 1 and validate_min + validate_max, which are set on each Specific's formset instance.

It appears there is no need for custom validation to enforce the correct Specific composition.

= Enforcing the Attribute composition of an Occurence=
1.a) For any Occurence, there must be one and only one OccurrenceAttribute instance mapping to each ReleaseAttribute of its correponding Release.
1.b) There must not be an OccurrenceAttribute without the corresponding ReleaseAttribute on the Release.
1.c) The value assigned to the OccurenceAttribute must be a value authorized by the corresponding ReleaseAttribute type.


= TODO =
* Implement a constraint that, if the same Attribute is repeated on a given Release, each ReleaseAttribute must have a distinct note


= Tweaking the Admin interface to fit the applicaiont =

* Removing the '+' sign on formsets (allowing to add more forms)
** set the FormSet class 'max_num' attribute to the number of displayed forms.

* Removing the 'delete' checkbox on formset forms
** set the AdminInline class 'can_delete' attribute to false. 


